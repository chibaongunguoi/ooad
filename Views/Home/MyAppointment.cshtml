@model AppointmentListViewModel
@{
    ViewData["Title"] = "My Appointments";
}

@Html.AntiForgeryToken()

<!-- Participants Modal -->
<div class="modal fade" id="participantsModal" tabindex="-1" aria-labelledby="participantsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="participantsModalLabel">Meeting Participants</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul id="participantsList" class="list-group">
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <h1 class="mb-4">@ViewData["Title"]</h1>

    <div class="row">
        <!-- Regular Appointments -->
        <div class="col-md-12 mb-4">
            <h2>Appointments</h2>
            @if (!Model.Appointments.Any())
            {
                <p>No appointments found.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Location</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var appointment in Model.Appointments)
                            {
                                <tr>
                                    <td>@appointment.Title</td>
                                    <td>@appointment.Location</td>
                                    <td>@appointment.StartTime.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@appointment.EndTime.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" onclick="deleteAppointment(@appointment.Id, 'appointment')">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <!-- Reminders -->
        <div class="col-md-12 mb-4">
            <h2>Reminders</h2>
            @if (!Model.Reminders.Any())
            {
                <p>No reminders found.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Location</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var reminder in Model.Reminders)
                            {
                                <tr>
                                    <td>@reminder.Title</td>
                                    <td>@reminder.Location</td>
                                    <td>@reminder.StartTime.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@reminder.EndTime.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" onclick="deleteAppointment(@reminder.Id, 'reminder')">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <!-- Group Meetings -->
        <div class="col-md-12 mb-4">
            <h2>Group Meetings</h2>
            @if (!Model.GroupMeetings.Any())
            {
                <p>No group meetings found.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Location</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var meeting in Model.GroupMeetings)
                            {
                                <tr>
                                    <td>
                                        @meeting.Title
                                        <span class="badge bg-info">@meeting.GroupMeeting_Users.Count() participants</span>
                                    </td>
                                    <td>@meeting.Location</td>
                                    <td>@meeting.StartTime.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@meeting.EndTime.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        <button class="btn btn-info btn-sm me-1" onclick="viewParticipants(@meeting.Id)">
                                            <i class="bi bi-people"></i> View Participants
                                        </button>
                                        <button class="btn btn-danger btn-sm" onclick="deleteAppointment(@meeting.Id, 'groupmeeting')">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function deleteAppointment(id, type) {
            fetch('/Home/DeleteAppointment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id: id, type: type })
            })
            .then(async response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    const errorText = await response.text();
                    console.error('Server error:', errorText);
                    alert('Error deleting appointment: ' + errorText);
                }
            })
            .catch(error => {
                console.error('Network error:', error);
                alert('Network error when deleting appointment: ' + error.message);
            });
        }

        function viewParticipants(meetingId) {
            fetch(`/Home/GetGroupMeetingParticipants?id=${meetingId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(participants => {
                    const list = document.getElementById('participantsList');
                    list.innerHTML = '';
                    
                    participants.forEach(participant => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.innerHTML = participant.username;
                        
                        if (participant.isCreator) {
                            const badge = document.createElement('span');
                            badge.className = 'badge bg-primary rounded-pill';
                            badge.innerHTML = 'Creator';
                            li.appendChild(badge);
                        }
                        
                        list.appendChild(li);
                    });
                    
                    const modal = new bootstrap.Modal(document.getElementById('participantsModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading participants');
                });
        }
    </script>
}