@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center mb-4">
    <h1 class="display-4">Welcome</h1>
</div>

<div class="text-center mb-4">
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#appointmentForm" aria-expanded="false" aria-controls="appointmentForm">
        Add Appointment
    </button>
</div>

<div class="collapse" id="appointmentForm">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add New Appointment</h5>
                    <form id="initialForm">
                        <div class="form-group mb-3">
                            <label for="appointmentDate">Date</label>
                            <input type="date" class="form-control" id="appointmentDate" name="appointmentDate" required>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col">
                                <label for="hours">Hours</label>
                                <select class="form-control" id="hours" name="hours" required>
                                    @for (int i = 0; i < 24; i++)
                                    {
                                        <option value="@i">@i.ToString("00")</option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <label for="minutes">Minutes</label>
                                <select class="form-control" id="minutes" name="minutes" required>
                                    @for (int i = 0; i < 60; i++)
                                    {
                                        <option value="@i">@i.ToString("00")</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <button type="button" class="btn btn-success" onclick="showDetailForm()">Create Appointment</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Popup -->
<div class="modal fade" id="appointmentDetailModal" tabindex="-1" aria-labelledby="appointmentDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="appointmentDetailModalLabel">Appointment Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" id="validationErrors" style="display: none;">
                </div>
                <form id="appointmentDetailForm" asp-action="CreateAppointment" asp-controller="Home" method="post">
                    <!-- Hidden fields for form submission -->
                    <input type="hidden" id="startDate" name="appointmentDate">

                    <div class="form-group mb-3">
                        <label for="title">Title</label>
                        <input type="text" class="form-control" id="title" name="title" required>
                    </div>

                    <div class="form-group mb-3">
                        <label for="location">Location</label>
                        <input type="text" class="form-control" id="location" name="location" required>
                    </div>

                    <div class="form-group mb-3">
                        <label>Start Time</label>
                        <div class="row">
                            <div class="col-4">
                                <input type="text" class="form-control" id="displayStartDate" readonly>
                            </div>
                            <div class="col">
                                <select class="form-control" id="startHours" name="hours" required>
                                    @for (int i = 0; i < 24; i++)
                                    {
                                        <option value="@i">@i.ToString("00")</option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <select class="form-control" id="startMinutes" name="minutes" required>
                                    @for (int i = 0; i < 60; i++)
                                    {
                                        <option value="@i">@i.ToString("00")</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label>End Time</label>
                        <div class="row">
                            <div class="col-4">
                                <input type="date" class="form-control" id="displayEndDate" name="endDate" required>
                            </div>
                            <div class="col">
                                <select class="form-control" id="endHours" name="endHours" required>
                                    <option value="" selected disabled>HH</option>
                                    @for (int i = 0; i < 24; i++)
                                    {
                                        <option value="@i">@i.ToString("00")</option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <select class="form-control" id="endMinutes" name="endMinutes" required>
                                    <option value="" selected disabled>MM</option>
                                    @for (int i = 0; i < 60; i++)
                                    {
                                        <option value="@i">@i.ToString("00")</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isReminder" name="isReminder">
                            <label class="form-check-label" for="isReminder">
                                Reminder
                            </label>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isGroupMeeting" name="isGroupMeeting">
                            <label class="form-check-label" for="isGroupMeeting">
                                Group Meeting
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="validateAndSubmit()">Xác Nhận</button>
            </div>
        </div>
    </div>
</div>

<!-- Conflict Warning Modal -->
<div class="modal fade" id="conflictModal" tabindex="-1" aria-labelledby="conflictModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="conflictModalLabel">Time Conflict Detected</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <p>There is already an appointment scheduled during this time:</p>
                    <div id="conflictDetails"></div>
                </div>
                <p>Would you like to choose a different time or replace the existing appointment?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Choose Different Time</button>
                <button type="button" class="btn btn-danger" onclick="replaceAppointment()">Replace Existing</button>
            </div>
        </div>
    </div>
</div>

<!-- Matching Group Meeting Modal -->
<div class="modal fade" id="matchingGroupModal" tabindex="-1" aria-labelledby="matchingGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="matchingGroupModalLabel">Similar Group Meeting Found</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <p>A group meeting with the same title and time was found:</p>
                    <div id="matchingGroupDetails"></div>
                </div>
                <p>Would you like to join this group meeting instead of creating a new appointment?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Create New Appointment</button>
                <button type="button" class="btn btn-success" onclick="joinGroupMeeting()">Join Group Meeting</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Ensure Bootstrap is loaded
            if (typeof bootstrap === 'undefined') {
                console.error('Bootstrap is not loaded');
            }
        });

        function showDetailForm() {
            console.log("showDetailForm called");
            
            // Get and validate form values
            const date = document.getElementById('appointmentDate').value;
            const hours = document.getElementById('hours').value;
            const minutes = document.getElementById('minutes').value;

            if (!date) {
                alert("Vui lòng chọn ngày");
                return;
            }

            console.log("Values:", { date, hours, minutes });

            // Get modal element
            const modalElement = document.getElementById('appointmentDetailModal');
            if (!modalElement) {
                console.error("Modal element not found");
                return;
            }

            // Set start time values in the modal form
            document.getElementById('startDate').value = date;
            document.getElementById('displayStartDate').value = date;
            document.getElementById('startHours').value = hours;
            document.getElementById('startMinutes').value = minutes;

            // Set end date default value to start date
            document.getElementById('displayEndDate').value = date;

            try {
                // Show the modal
                console.log("Showing modal");
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                console.log("Modal should be visible now");
            } catch (error) {
                console.error("Error showing modal:", error);
            }
        }

        function validateAndSubmit() {
            const errorDiv = document.getElementById('validationErrors');
            const errors = [];

            // Check required fields
            const title = document.getElementById('title').value.trim();
            const location = document.getElementById('location').value.trim();
            const endDate = document.getElementById('displayEndDate').value;
            const endHours = document.getElementById('endHours').value;
            const endMinutes = document.getElementById('endMinutes').value;

            if (!title) {
                errors.push("Tiêu đề không được để trống");
            }

            if (!location) {
                errors.push("Địa điểm không được để trống");
            }

            if (!endDate) {
                errors.push("Vui lòng chọn ngày kết thúc");
            }

            if (!endHours || !endMinutes) {
                errors.push("Vui lòng chọn thời gian kết thúc");
            }

            // Check if end time is after start time
            if (endDate && endHours && endMinutes) {
                const startDate = document.getElementById('startDate').value;
                const startHours = parseInt(document.getElementById('startHours').value);
                const startMinutes = parseInt(document.getElementById('startMinutes').value);
                const endHoursInt = parseInt(endHours);
                const endMinutesInt = parseInt(endMinutes);

                const startTime = new Date(startDate);
                startTime.setHours(startHours, startMinutes);

                const endTime = new Date(endDate);
                endTime.setHours(endHoursInt, endMinutesInt);

                if (endTime <= startTime) {
                    errors.push("Thời gian kết thúc phải sau thời gian bắt đầu");
                }
            }

            // Display errors or submit form
            if (errors.length > 0) {
                errorDiv.innerHTML = errors.map(error => `<div>${error}</div>`).join('');
                errorDiv.style.display = 'block';
                return;
            }

            // Create a FormData object to ensure all form fields are included
            const form = document.getElementById('appointmentDetailForm');
            const formData = new FormData(form);

            // Explicitly set checkbox values
            formData.set('isReminder', document.getElementById('isReminder').checked);
            formData.set('isGroupMeeting', document.getElementById('isGroupMeeting').checked);

            // Convert FormData to URLSearchParams for proper form submission
            const params = new URLSearchParams(formData);

            // Create and submit a temporary form
            const tempForm = document.createElement('form');
            tempForm.method = 'POST';
            tempForm.action = form.action;
            tempForm.style.display = 'none';

            for (const [key, value] of params) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = key;
                input.value = value;
                tempForm.appendChild(input);
            }

            document.body.appendChild(tempForm);
            tempForm.submit();
        }

        function replaceAppointment() {
            // Add forceCreate parameter to force the appointment creation
            const form = document.getElementById('appointmentDetailForm');
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'forceCreate';
            input.value = 'true';
            form.appendChild(input);
            
            // Submit the form
            validateAndSubmit();
        }

        function joinGroupMeeting() {
            // Add joinGroup parameter when submitting the form
            const form = document.getElementById('appointmentDetailForm');
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'joinGroup';
            input.value = 'true';
            form.appendChild(input);
            
            // Submit the form
            validateAndSubmit();
        }

        // Check for conflict data on page load
        document.addEventListener('DOMContentLoaded', function() {
            @if (TempData["Conflict"] != null)
            {
                <text>
                const conflictingAppointment = @Html.Raw(TempData["ConflictingAppointment"]);
                const formData = @Html.Raw(TempData["FormData"]);
                
                // Populate the form with the previous data
                document.getElementById('title').value = formData.Title;
                document.getElementById('location').value = formData.Location;
                document.getElementById('startDate').value = new Date(formData.StartTime).toISOString().split('T')[0];
                document.getElementById('displayStartDate').value = new Date(formData.StartTime).toISOString().split('T')[0];
                document.getElementById('startHours').value = new Date(formData.StartTime).getHours();
                document.getElementById('startMinutes').value = new Date(formData.StartTime).getMinutes();
                document.getElementById('displayEndDate').value = new Date(formData.EndTime).toISOString().split('T')[0];
                document.getElementById('endHours').value = new Date(formData.EndTime).getHours();
                document.getElementById('endMinutes').value = new Date(formData.EndTime).getMinutes();
                document.getElementById('isReminder').checked = formData.IsReminder;
                document.getElementById('isGroupMeeting').checked = formData.IsGroupMeeting;

                // Show conflict details
                const conflictDetails = document.getElementById('conflictDetails');
                conflictDetails.innerHTML = `
                    <strong>Title:</strong> ${conflictingAppointment.Title}<br>
                    <strong>Location:</strong> ${conflictingAppointment.Location}<br>
                    <strong>Start:</strong> ${new Date(conflictingAppointment.StartTime).toLocaleString()}<br>
                    <strong>End:</strong> ${new Date(conflictingAppointment.EndTime).toLocaleString()}
                `;

                // Show the conflict modal
                const modal = new bootstrap.Modal(document.getElementById('conflictModal'));
                modal.show();

                // Show the appointment form if it was hidden
                const appointmentForm = document.getElementById('appointmentForm');
                appointmentForm.classList.add('show');
                </text>
            }

            @if (TempData["MatchingGroupMeeting"] != null)
            {
                <text>
                const matchingMeeting = @Html.Raw(TempData["MatchingGroupMeetingData"]);
                const formData = @Html.Raw(TempData["FormData"]);
                
                // Populate the form with the previous data
                document.getElementById('title').value = formData.Title;
                document.getElementById('location').value = formData.Location;
                document.getElementById('startDate').value = new Date(formData.StartTime).toISOString().split('T')[0];
                document.getElementById('displayStartDate').value = new Date(formData.StartTime).toISOString().split('T')[0];
                document.getElementById('startHours').value = new Date(formData.StartTime).getHours();
                document.getElementById('startMinutes').value = new Date(formData.StartTime).getMinutes();
                document.getElementById('displayEndDate').value = new Date(formData.EndTime).toISOString().split('T')[0];
                document.getElementById('endHours').value = new Date(formData.EndTime).getHours();
                document.getElementById('endMinutes').value = new Date(formData.EndTime).getMinutes();
                document.getElementById('isReminder').checked = formData.IsReminder;
                document.getElementById('isGroupMeeting').checked = formData.IsGroupMeeting;

                // Show matching group meeting details
                const matchingDetails = document.getElementById('matchingGroupDetails');
                matchingDetails.innerHTML = `
                    <strong>Title:</strong> ${matchingMeeting.Title}<br>
                    <strong>Location:</strong> ${matchingMeeting.Location}<br>
                    <strong>Start:</strong> ${new Date(matchingMeeting.StartTime).toLocaleString()}<br>
                    <strong>End:</strong> ${new Date(matchingMeeting.EndTime).toLocaleString()}
                `;

                // Show the matching group modal
                const modal = new bootstrap.Modal(document.getElementById('matchingGroupModal'));
                modal.show();

                // Show the appointment form if it was hidden
                const appointmentForm = document.getElementById('appointmentForm');
                appointmentForm.classList.add('show');
                </text>
            }
        });
    </script>
}
